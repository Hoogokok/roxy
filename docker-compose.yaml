services:
  reverse-proxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
      - ./certs:/app/certs:ro
    environment:
      - PROXY_DOCKER_NETWORK=reverse-proxy-network
      - HTTP_PORT=80
      - HTTPS_ENABLED=true
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PROXY_VERBOSE=true
      - TLS_CERT_PATH=/app/certs/cert.pem
      - TLS_KEY_PATH=/app/certs/key.pem
      - HTTPS_PORT=443
      - PROXY_LOG_LEVEL=debug
      - PROXY_LOG_FORMAT=text
    user: root
    restart: "no"
    networks:
      - reverse-proxy-network
    depends_on:
      - api
      - web

  # API 서비스
  api:
    image: nginx:alpine
    container_name: api
    expose:
      - "80"
    labels:
      - "rproxy.http.routers.api.rule=Host(`test.localhost`) && PathPrefix(`/api`)"
      - "rproxy.http.services.api.loadbalancer.server.port=80"
      - "rproxy.http.middlewares.api-cors.cors.allowOrigins=http://localhost:3000,https://example.com"
      - "rproxy.http.middlewares.api-cors.cors.allowMethods=GET,POST,PUT,DELETE,OPTIONS"
      - "rproxy.http.middlewares.api-cors.cors.allowHeaders=Content-Type,Authorization,X-Request-ID"
      - "rproxy.http.middlewares.api-cors.cors.allowCredentials=true"
      - "rproxy.http.middlewares.api-cors.cors.exposeHeaders=X-Custom-Header"
      - "rproxy.http.middlewares.api-cors.cors.maxAge=3600"
      - "rproxy.http.middlewares.api-cors.type=cors"
      - "rproxy.http.middlewares.api-cors.enabled=true"
      - "rproxy.http.middlewares.api-headers.type=headers"
      - "rproxy.http.middlewares.api-headers.enabled=true"
      - "rproxy.http.middlewares.api-headers.headers.request.add.X-Request-ID=123"
      - "rproxy.http.middlewares.api-headers.headers.response.add.X-Custom-Header=value"
      - "rproxy.http.middlewares.api-headers.headers.response.remove=server"
      - "rproxy.http.routers.api.middlewares=api-cors,api-headers"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/api:/usr/share/nginx/html
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf

  # 웹 서비스
  web:
    image: nginx:alpine
    container_name: web
    expose:
      - "80"
    labels:
      - "rproxy.http.services.web.loadbalancer.server.port=80"
      - "rproxy.http.routers.web.rule=Host(`test.localhost`) && PathPrefix(`/web`)"
      - "rproxy.http.middlewares.web-headers.type=headers"
      - "rproxy.http.middlewares.web-headers.enabled=true"
      - "rproxy.http.middlewares.web-headers.headers.request.add.X-Real-IP=true"
      - "rproxy.http.middlewares.web-headers.headers.response.set.Content-Security-Policy=default-src 'self'"
      - "rproxy.http.middlewares.web-ratelimit.type=ratelimit"
      - "rproxy.http.middlewares.web-ratelimit.enabled=true"
      - "rproxy.http.middlewares.web-ratelimit.rateLimit.average=2"
      - "rproxy.http.middlewares.web-ratelimit.rateLimit.burst=4"
      - "rproxy.http.routers.web.middlewares=web-headers,web-ratelimit"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/web:/usr/share/nginx/html
      - ./nginx/web.conf:/etc/nginx/conf.d/default.conf

# 테스트를 위한 네트워크 설정
networks:
  reverse-proxy-network:
    name: reverse-proxy-network 

volumes:
  cargo-cache:
  target-cache: