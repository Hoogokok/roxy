services:
  reverse-proxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
      - ./certs:/app/certs:ro
      - ./test:/app/test:ro
    environment:
      - PROXY_DOCKER_NETWORK=reverse-proxy-network
      - HTTP_PORT=80
      - PROXY_HTTPS_ENABLED=true
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PROXY_VERBOSE=true
      - PROXY_TLS_CERT=/app/certs/cert.pem
      - PROXY_TLS_KEY=/app/certs/key.pem
      - PROXY_HTTPS_PORT=443
      - PROXY_LOG_LEVEL=debug
      - PROXY_LOG_FORMAT=text
      - PROXY_HEALTH_CHECK_ENABLED=true
      - PROXY_HEALTH_CHECK_INTERVAL=30
      - PROXY_RETRY_COUNT=3
    user: root
    restart: "no"
    networks:
      - reverse-proxy-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "reverse-proxy"

  # API 서비스 (가중치 기반 로드밸런싱)
  api-1:
    image: nginx:alpine
    container_name: api-1
    expose:
      - "80"
    labels:
      - "rproxy.http.routers.api.rule=Host(`test.localhost`) && PathPrefix(`/api`)"
      - "rproxy.http.services.api.loadbalancer.server.port=80"
      - "rproxy.http.services.api.loadbalancer.server.weight=2"
      - "rproxy.health.enabled=true"
      - "rproxy.health.http.path=/health"
      - "rproxy.health.interval=30"
      - "rproxy.http.middlewares.api-cors.cors.allowOrigins=http://localhost:3000,https://example.com"
      - "rproxy.http.middlewares.api-cors.cors.allowMethods=GET,POST,PUT,DELETE,OPTIONS"
      - "rproxy.http.middlewares.api-cors.cors.allowHeaders=Content-Type,Authorization,X-Request-ID"
      - "rproxy.http.middlewares.api-cors.cors.allowCredentials=true"
      - "rproxy.http.middlewares.api-cors.cors.exposeHeaders=X-Custom-Header"
      - "rproxy.http.middlewares.api-cors.cors.maxAge=3600"
      - "rproxy.http.middlewares.api-cors.type=cors"
      - "rproxy.http.middlewares.api-cors.enabled=true"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/api:/usr/share/nginx/html
      - ./nginx/api-1.conf:/etc/nginx/conf.d/default.conf

  api-2:
    image: nginx:alpine
    container_name: api-2
    expose:
      - "80"
    labels:
      - "rproxy.http.routers.api.rule=Host(`test.localhost`) && PathPrefix(`/api`)"
      - "rproxy.http.services.api.loadbalancer.server.port=80"
      - "rproxy.http.services.api.loadbalancer.server.weight=1"
      - "rproxy.health.enabled=true"
      - "rproxy.health.http.path=/health"
      - "rproxy.health.interval=30"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/api:/usr/share/nginx/html
      - ./nginx/api-2.conf:/etc/nginx/conf.d/default.conf

  # 웹 서비스 (라운드로빈 로드밸런싱)
  web-1:
    image: nginx:alpine
    container_name: web-1
    expose:
      - "80"
    labels:
      - "rproxy.http.routers.web.rule=Host(`test.localhost`) && PathPrefix(`/web`)"
      - "rproxy.http.services.web.loadbalancer.server.port=80"
      - "rproxy.http.routers.web.middlewares=web-ratelimit"
      - "rproxy.health.enabled=true"
      - "rproxy.health.http.path=/health"
      - "rproxy.health.interval=30"
      - "rproxy.http.middlewares.web-ratelimit.type=ratelimit"
      - "rproxy.http.middlewares.web-ratelimit.enabled=true"
      - "rproxy.http.middlewares.web-ratelimit.rateLimit.average=2"
      - "rproxy.http.middlewares.web-ratelimit.rateLimit.burst=4"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/web:/usr/share/nginx/html
      - ./nginx/web-1.conf:/etc/nginx/conf.d/default.conf

  web-2:
    image: nginx:alpine
    container_name: web-2
    expose:
      - "80"
    labels:
      - "rproxy.http.routers.web.rule=Host(`test.localhost`) && PathPrefix(`/web`)"
      - "rproxy.http.services.web.loadbalancer.server.port=80"
      - "rproxy.http.routers.web.middlewares=web-ratelimit"
      - "rproxy.health.enabled=true"
      - "rproxy.health.http.path=/health"
      - "rproxy.health.interval=30"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/web:/usr/share/nginx/html
      - ./nginx/web-2.conf:/etc/nginx/conf.d/default.conf

# 테스트를 위한 네트워크 설정
networks:
  reverse-proxy-network:
    name: reverse-proxy-network

volumes:
  cargo-cache:
  target-cache: