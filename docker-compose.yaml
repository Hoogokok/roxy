services:
  reverse-proxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
      - ./certs:/certs
    environment:
      - PROXY_DOCKER_NETWORK=reverse-proxy-network
      - HTTP_PORT=80
      - HTTPS_ENABLED=true
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PROXY_VERBOSE=true
      - TLS_CERT_PATH=/certs/cert.pem
      - TLS_KEY_PATH=/certs/key.pem
      - HTTPS_PORT=443
    restart: "no"
    user: root
    networks:
      - reverse-proxy-network

  # API 서비스
  api:
    image: nginx:alpine
    container_name: api
    expose:
      - "80"
    labels:
      - "rproxy.http.services.api.loadbalancer.server.port=80"
      - "rproxy.http.routers.api.rule=Host(`test.localhost`) && PathPrefix(`/api`)"
      - "rproxy.http.middlewares.api-headers.headers.request.add.X-Request-ID=123"
      - "rproxy.http.middlewares.api-headers.headers.response.add.X-Custom-Header=value"
      - "rproxy.http.middlewares.api-headers.headers.response.remove=Server"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/api:/usr/share/nginx/html
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf  # nginx 설정 추가

  # 웹 서비스
  web:
    image: nginx:alpine
    container_name: web
    expose:
      - "80"
    labels:
      - "rproxy.http.services.web.loadbalancer.server.port=80"
      - "rproxy.http.routers.web.rule=Host(`test.localhost`) && PathPrefix(`/web`)"
      - "rproxy.http.middlewares.web-headers.headers.request.add.X-Real-IP=true"
      - "rproxy.http.middlewares.web-headers.headers.response.set.Content-Security-Policy=default-src 'self'"
    networks:
      - reverse-proxy-network
    volumes:
      - ./test/web:/usr/share/nginx/html
      - ./nginx/web.conf:/etc/nginx/conf.d/default.conf  # nginx 설정 추가

# 테스트를 위한 네트워크 설정
networks:
  reverse-proxy-network:
    name: reverse-proxy-network 

volumes:
  cargo-cache:
  target-cache: